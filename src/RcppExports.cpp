// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_g2p_map
NumericVector rcpp_g2p_map(IntegerVector G, IntegerVector dims, NumericMatrix bvs, double add_loci, double sex_ratio, double e_v);
RcppExport SEXP _glads_rcpp_g2p_map(SEXP GSEXP, SEXP dimsSEXP, SEXP bvsSEXP, SEXP add_lociSEXP, SEXP sex_ratioSEXP, SEXP e_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type bvs(bvsSEXP);
    Rcpp::traits::input_parameter< double >::type add_loci(add_lociSEXP);
    Rcpp::traits::input_parameter< double >::type sex_ratio(sex_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type e_v(e_vSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_g2p_map(G, dims, bvs, add_loci, sex_ratio, e_v));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_recombo_segregate
IntegerVector rcpp_recombo_segregate(IntegerVector G, IntegerVector dims, NumericVector rf);
RcppExport SEXP _glads_rcpp_recombo_segregate(SEXP GSEXP, SEXP dimsSEXP, SEXP rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rf(rfSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_recombo_segregate(G, dims, rf));
    return rcpp_result_gen;
END_RCPP
}
// breakpoints1
IntegerVector breakpoints1(int chr_len, double rate);
RcppExport SEXP _glads_breakpoints1(SEXP chr_lenSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type chr_len(chr_lenSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(breakpoints1(chr_len, rate));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_recombo_segregate_expo
IntegerVector rcpp_recombo_segregate_expo(IntegerVector G, IntegerVector dims, IntegerVector pos, int chromo_length, double cross);
RcppExport SEXP _glads_rcpp_recombo_segregate_expo(SEXP GSEXP, SEXP dimsSEXP, SEXP posSEXP, SEXP chromo_lengthSEXP, SEXP crossSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type chromo_length(chromo_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type cross(crossSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_recombo_segregate_expo(G, dims, pos, chromo_length, cross));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dispersal_placement
List rcpp_dispersal_placement(IntegerVector P1, IntegerVector P2, IntegerVector d1, IntegerVector d2, IntegerVector a1, IntegerVector a2);
RcppExport SEXP _glads_rcpp_dispersal_placement(SEXP P1SEXP, SEXP P2SEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type P2(P2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dispersal_placement(P1, P2, d1, d2, a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// read_macs_output
List read_macs_output(CharacterVector Input);
RcppExport SEXP _glads_read_macs_output(SEXP InputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Input(InputSEXP);
    rcpp_result_gen = Rcpp::wrap(read_macs_output(Input));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glads_rcpp_g2p_map", (DL_FUNC) &_glads_rcpp_g2p_map, 6},
    {"_glads_rcpp_recombo_segregate", (DL_FUNC) &_glads_rcpp_recombo_segregate, 3},
    {"_glads_breakpoints1", (DL_FUNC) &_glads_breakpoints1, 2},
    {"_glads_rcpp_recombo_segregate_expo", (DL_FUNC) &_glads_rcpp_recombo_segregate_expo, 5},
    {"_glads_rcpp_dispersal_placement", (DL_FUNC) &_glads_rcpp_dispersal_placement, 6},
    {"_glads_read_macs_output", (DL_FUNC) &_glads_read_macs_output, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_glads(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
